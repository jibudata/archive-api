// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: library_manager.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateLibraryManagerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *LibraryManagerSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *CreateLibraryManagerParams) Reset() {
	*x = CreateLibraryManagerParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLibraryManagerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLibraryManagerParams) ProtoMessage() {}

func (x *CreateLibraryManagerParams) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLibraryManagerParams.ProtoReflect.Descriptor instead.
func (*CreateLibraryManagerParams) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{0}
}

func (x *CreateLibraryManagerParams) GetSpec() *LibraryManagerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type UpdateLibraryManagerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceKey *ResourceKey        `protobuf:"bytes,1,opt,name=resource_key,json=resourceKey,proto3" json:"resource_key,omitempty"`
	Spec        *LibraryManagerSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *UpdateLibraryManagerParams) Reset() {
	*x = UpdateLibraryManagerParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLibraryManagerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLibraryManagerParams) ProtoMessage() {}

func (x *UpdateLibraryManagerParams) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLibraryManagerParams.ProtoReflect.Descriptor instead.
func (*UpdateLibraryManagerParams) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateLibraryManagerParams) GetResourceKey() *ResourceKey {
	if x != nil {
		return x.ResourceKey
	}
	return nil
}

func (x *UpdateLibraryManagerParams) GetSpec() *LibraryManagerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type LibraryManagerObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec            *LibraryManagerSpec  `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	LibraryInfo     *TapeLibraryInfo     `protobuf:"bytes,2,opt,name=library_info,json=libraryInfo,proto3" json:"library_info,omitempty"`
	System          *SystemInfo          `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty"`
	DataManagerInfo *LTFSDataManagerInfo `protobuf:"bytes,4,opt,name=data_manager_info,json=dataManagerInfo,proto3" json:"data_manager_info,omitempty"`
}

func (x *LibraryManagerObject) Reset() {
	*x = LibraryManagerObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibraryManagerObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibraryManagerObject) ProtoMessage() {}

func (x *LibraryManagerObject) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibraryManagerObject.ProtoReflect.Descriptor instead.
func (*LibraryManagerObject) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{2}
}

func (x *LibraryManagerObject) GetSpec() *LibraryManagerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *LibraryManagerObject) GetLibraryInfo() *TapeLibraryInfo {
	if x != nil {
		return x.LibraryInfo
	}
	return nil
}

func (x *LibraryManagerObject) GetSystem() *SystemInfo {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *LibraryManagerObject) GetDataManagerInfo() *LTFSDataManagerInfo {
	if x != nil {
		return x.DataManagerInfo
	}
	return nil
}

type LibraryManagersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*LibraryManagerObject `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	TotalSize int32                   `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *LibraryManagersReply) Reset() {
	*x = LibraryManagersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibraryManagersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibraryManagersReply) ProtoMessage() {}

func (x *LibraryManagersReply) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibraryManagersReply.ProtoReflect.Descriptor instead.
func (*LibraryManagersReply) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{3}
}

func (x *LibraryManagersReply) GetData() []*LibraryManagerObject {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LibraryManagersReply) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type TapeLibraryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor          string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	SerialNumber    string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	ProductId       string `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	LibraryName     string `protobuf:"bytes,4,opt,name=library_name,json=libraryName,proto3" json:"library_name,omitempty"`
	FirmwareVersion string `protobuf:"bytes,5,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	State           string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TapeLibraryInfo) Reset() {
	*x = TapeLibraryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TapeLibraryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapeLibraryInfo) ProtoMessage() {}

func (x *TapeLibraryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapeLibraryInfo.ProtoReflect.Descriptor instead.
func (*TapeLibraryInfo) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{4}
}

func (x *TapeLibraryInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *TapeLibraryInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TapeLibraryInfo) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *TapeLibraryInfo) GetLibraryName() string {
	if x != nil {
		return x.LibraryName
	}
	return ""
}

func (x *TapeLibraryInfo) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *TapeLibraryInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type SystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision              string `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	CapacityBytes         uint64 `protobuf:"varint,2,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"`
	TotalCatridges        int32  `protobuf:"varint,3,opt,name=total_catridges,json=totalCatridges,proto3" json:"total_catridges,omitempty"`
	LicensedCapacityBytes uint64 `protobuf:"varint,4,opt,name=licensed_capacity_bytes,json=licensedCapacityBytes,proto3" json:"licensed_capacity_bytes,omitempty"`
	NumberCopies          int32  `protobuf:"varint,5,opt,name=number_copies,json=numberCopies,proto3" json:"number_copies,omitempty"`
	Worm                  bool   `protobuf:"varint,6,opt,name=worm,proto3" json:"worm,omitempty"`
	FaultyCatridges       int32  `protobuf:"varint,7,opt,name=faulty_catridges,json=faultyCatridges,proto3" json:"faulty_catridges,omitempty"`
	CleaningCatridges     int32  `protobuf:"varint,8,opt,name=cleaning_catridges,json=cleaningCatridges,proto3" json:"cleaning_catridges,omitempty"`
	NumberFiles           int32  `protobuf:"varint,9,opt,name=number_files,json=numberFiles,proto3" json:"number_files,omitempty"`
}

func (x *SystemInfo) Reset() {
	*x = SystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfo) ProtoMessage() {}

func (x *SystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfo.ProtoReflect.Descriptor instead.
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{5}
}

func (x *SystemInfo) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *SystemInfo) GetCapacityBytes() uint64 {
	if x != nil {
		return x.CapacityBytes
	}
	return 0
}

func (x *SystemInfo) GetTotalCatridges() int32 {
	if x != nil {
		return x.TotalCatridges
	}
	return 0
}

func (x *SystemInfo) GetLicensedCapacityBytes() uint64 {
	if x != nil {
		return x.LicensedCapacityBytes
	}
	return 0
}

func (x *SystemInfo) GetNumberCopies() int32 {
	if x != nil {
		return x.NumberCopies
	}
	return 0
}

func (x *SystemInfo) GetWorm() bool {
	if x != nil {
		return x.Worm
	}
	return false
}

func (x *SystemInfo) GetFaultyCatridges() int32 {
	if x != nil {
		return x.FaultyCatridges
	}
	return 0
}

func (x *SystemInfo) GetCleaningCatridges() int32 {
	if x != nil {
		return x.CleaningCatridges
	}
	return 0
}

func (x *SystemInfo) GetNumberFiles() int32 {
	if x != nil {
		return x.NumberFiles
	}
	return 0
}

type LTFSDataManagerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision string `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	State    string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *LTFSDataManagerInfo) Reset() {
	*x = LTFSDataManagerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTFSDataManagerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTFSDataManagerInfo) ProtoMessage() {}

func (x *LTFSDataManagerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTFSDataManagerInfo.ProtoReflect.Descriptor instead.
func (*LTFSDataManagerInfo) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{6}
}

func (x *LTFSDataManagerInfo) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *LTFSDataManagerInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type TapeLibrarySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberCopies int32 `protobuf:"varint,1,opt,name=number_copies,json=numberCopies,proto3" json:"number_copies,omitempty"`
	Enable_WORM  bool  `protobuf:"varint,2,opt,name=enable_WORM,json=enableWORM,proto3" json:"enable_WORM,omitempty"`
}

func (x *TapeLibrarySetting) Reset() {
	*x = TapeLibrarySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TapeLibrarySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapeLibrarySetting) ProtoMessage() {}

func (x *TapeLibrarySetting) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapeLibrarySetting.ProtoReflect.Descriptor instead.
func (*TapeLibrarySetting) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{7}
}

func (x *TapeLibrarySetting) GetNumberCopies() int32 {
	if x != nil {
		return x.NumberCopies
	}
	return 0
}

func (x *TapeLibrarySetting) GetEnable_WORM() bool {
	if x != nil {
		return x.Enable_WORM
	}
	return false
}

type ManagedFileSystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountPoint         string `protobuf:"bytes,1,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
	DevicePath         string `protobuf:"bytes,2,opt,name=device_path,json=devicePath,proto3" json:"device_path,omitempty"`
	FilesystemType     string `protobuf:"bytes,3,opt,name=filesystem_type,json=filesystemType,proto3" json:"filesystem_type,omitempty"`
	MountOptions       string `protobuf:"bytes,4,opt,name=mount_options,json=mountOptions,proto3" json:"mount_options,omitempty"`
	TotalCapacityBytes uint64 `protobuf:"varint,5,opt,name=total_capacity_bytes,json=totalCapacityBytes,proto3" json:"total_capacity_bytes,omitempty"`
	FreeCapacityBytes  uint64 `protobuf:"varint,6,opt,name=free_capacity_bytes,json=freeCapacityBytes,proto3" json:"free_capacity_bytes,omitempty"`
}

func (x *ManagedFileSystemInfo) Reset() {
	*x = ManagedFileSystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedFileSystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedFileSystemInfo) ProtoMessage() {}

func (x *ManagedFileSystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedFileSystemInfo.ProtoReflect.Descriptor instead.
func (*ManagedFileSystemInfo) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{8}
}

func (x *ManagedFileSystemInfo) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *ManagedFileSystemInfo) GetDevicePath() string {
	if x != nil {
		return x.DevicePath
	}
	return ""
}

func (x *ManagedFileSystemInfo) GetFilesystemType() string {
	if x != nil {
		return x.FilesystemType
	}
	return ""
}

func (x *ManagedFileSystemInfo) GetMountOptions() string {
	if x != nil {
		return x.MountOptions
	}
	return ""
}

func (x *ManagedFileSystemInfo) GetTotalCapacityBytes() uint64 {
	if x != nil {
		return x.TotalCapacityBytes
	}
	return 0
}

func (x *ManagedFileSystemInfo) GetFreeCapacityBytes() uint64 {
	if x != nil {
		return x.FreeCapacityBytes
	}
	return 0
}

type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress     string                   `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	HostName      string                   `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	ManagedFsInfo []*ManagedFileSystemInfo `protobuf:"bytes,3,rep,name=managed_fs_info,json=managedFsInfo,proto3" json:"managed_fs_info,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{9}
}

func (x *HostInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *HostInfo) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *HostInfo) GetManagedFsInfo() []*ManagedFileSystemInfo {
	if x != nil {
		return x.ManagedFsInfo
	}
	return nil
}

type LibraryManagerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LibraryType     string              `protobuf:"bytes,1,opt,name=library_type,json=libraryType,proto3" json:"library_type,omitempty"`
	Name            string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NodeInfo        *HostInfo           `protobuf:"bytes,3,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	Settings        *TapeLibrarySetting `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	ManagementToken string              `protobuf:"bytes,5,opt,name=management_token,json=managementToken,proto3" json:"management_token,omitempty"`
}

func (x *LibraryManagerSpec) Reset() {
	*x = LibraryManagerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibraryManagerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibraryManagerSpec) ProtoMessage() {}

func (x *LibraryManagerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_library_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibraryManagerSpec.ProtoReflect.Descriptor instead.
func (*LibraryManagerSpec) Descriptor() ([]byte, []int) {
	return file_library_manager_proto_rawDescGZIP(), []int{10}
}

func (x *LibraryManagerSpec) GetLibraryType() string {
	if x != nil {
		return x.LibraryType
	}
	return ""
}

func (x *LibraryManagerSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LibraryManagerSpec) GetNodeInfo() *HostInfo {
	if x != nil {
		return x.NodeInfo
	}
	return nil
}

func (x *LibraryManagerSpec) GetSettings() *TapeLibrarySetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *LibraryManagerSpec) GetManagementToken() string {
	if x != nil {
		return x.ManagementToken
	}
	return ""
}

var File_library_manager_proto protoreflect.FileDescriptor

var file_library_manager_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0a, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x48, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x2a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x7c, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xe7, 0x01, 0x0a, 0x14, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x36, 0x0a, 0x0c, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x70, 0x65, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x43, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x54, 0x46, 0x53, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x14, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x54, 0x61,
	0x70, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe6, 0x02,
	0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x61, 0x74, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x13, 0x4c, 0x54, 0x46, 0x53, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x5a, 0x0a, 0x12, 0x54, 0x61, 0x70, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x57, 0x4f, 0x52, 0x4d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x4f, 0x52, 0x4d, 0x22, 0x89, 0x02, 0x0a, 0x15,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x66, 0x72, 0x65, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x46, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x70, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xd3, 0x04, 0x0a, 0x11,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x62, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x18, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x78,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x3a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x68, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x2a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6a, 0x69, 0x62, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61,
	0x6c, 0x2d, 0x61, 0x70, 0x69, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_library_manager_proto_rawDescOnce sync.Once
	file_library_manager_proto_rawDescData = file_library_manager_proto_rawDesc
)

func file_library_manager_proto_rawDescGZIP() []byte {
	file_library_manager_proto_rawDescOnce.Do(func() {
		file_library_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_library_manager_proto_rawDescData)
	})
	return file_library_manager_proto_rawDescData
}

var file_library_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_library_manager_proto_goTypes = []interface{}{
	(*CreateLibraryManagerParams)(nil), // 0: v1.CreateLibraryManagerParams
	(*UpdateLibraryManagerParams)(nil), // 1: v1.UpdateLibraryManagerParams
	(*LibraryManagerObject)(nil),       // 2: v1.LibraryManagerObject
	(*LibraryManagersReply)(nil),       // 3: v1.LibraryManagersReply
	(*TapeLibraryInfo)(nil),            // 4: v1.TapeLibraryInfo
	(*SystemInfo)(nil),                 // 5: v1.SystemInfo
	(*LTFSDataManagerInfo)(nil),        // 6: v1.LTFSDataManagerInfo
	(*TapeLibrarySetting)(nil),         // 7: v1.TapeLibrarySetting
	(*ManagedFileSystemInfo)(nil),      // 8: v1.ManagedFileSystemInfo
	(*HostInfo)(nil),                   // 9: v1.HostInfo
	(*LibraryManagerSpec)(nil),         // 10: v1.LibraryManagerSpec
	(*ResourceKey)(nil),                // 11: v1.ResourceKey
	(*emptypb.Empty)(nil),              // 12: google.protobuf.Empty
}
var file_library_manager_proto_depIdxs = []int32{
	10, // 0: v1.CreateLibraryManagerParams.spec:type_name -> v1.LibraryManagerSpec
	11, // 1: v1.UpdateLibraryManagerParams.resource_key:type_name -> v1.ResourceKey
	10, // 2: v1.UpdateLibraryManagerParams.spec:type_name -> v1.LibraryManagerSpec
	10, // 3: v1.LibraryManagerObject.spec:type_name -> v1.LibraryManagerSpec
	4,  // 4: v1.LibraryManagerObject.library_info:type_name -> v1.TapeLibraryInfo
	5,  // 5: v1.LibraryManagerObject.system:type_name -> v1.SystemInfo
	6,  // 6: v1.LibraryManagerObject.data_manager_info:type_name -> v1.LTFSDataManagerInfo
	2,  // 7: v1.LibraryManagersReply.data:type_name -> v1.LibraryManagerObject
	8,  // 8: v1.HostInfo.managed_fs_info:type_name -> v1.ManagedFileSystemInfo
	9,  // 9: v1.LibraryManagerSpec.node_info:type_name -> v1.HostInfo
	7,  // 10: v1.LibraryManagerSpec.settings:type_name -> v1.TapeLibrarySetting
	11, // 11: v1.LibraryManagement.ListLibraryManagers:input_type -> v1.ResourceKey
	11, // 12: v1.LibraryManagement.GetLibraryManager:input_type -> v1.ResourceKey
	0,  // 13: v1.LibraryManagement.CreateLibraryManager:input_type -> v1.CreateLibraryManagerParams
	1,  // 14: v1.LibraryManagement.UpdateLibraryManager:input_type -> v1.UpdateLibraryManagerParams
	11, // 15: v1.LibraryManagement.DeleteLibraryManager:input_type -> v1.ResourceKey
	3,  // 16: v1.LibraryManagement.ListLibraryManagers:output_type -> v1.LibraryManagersReply
	2,  // 17: v1.LibraryManagement.GetLibraryManager:output_type -> v1.LibraryManagerObject
	2,  // 18: v1.LibraryManagement.CreateLibraryManager:output_type -> v1.LibraryManagerObject
	2,  // 19: v1.LibraryManagement.UpdateLibraryManager:output_type -> v1.LibraryManagerObject
	12, // 20: v1.LibraryManagement.DeleteLibraryManager:output_type -> google.protobuf.Empty
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_library_manager_proto_init() }
func file_library_manager_proto_init() {
	if File_library_manager_proto != nil {
		return
	}
	file_meta_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_library_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLibraryManagerParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLibraryManagerParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibraryManagerObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibraryManagersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TapeLibraryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTFSDataManagerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TapeLibrarySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedFileSystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibraryManagerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_library_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_library_manager_proto_goTypes,
		DependencyIndexes: file_library_manager_proto_depIdxs,
		MessageInfos:      file_library_manager_proto_msgTypes,
	}.Build()
	File_library_manager_proto = out.File
	file_library_manager_proto_rawDesc = nil
	file_library_manager_proto_goTypes = nil
	file_library_manager_proto_depIdxs = nil
}
