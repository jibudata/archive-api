// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.4
// source: library_manager.proto

package v1

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLibraryManagementCreateLibraryManager = "/v1.LibraryManagement/CreateLibraryManager"
const OperationLibraryManagementDeleteLibraryManager = "/v1.LibraryManagement/DeleteLibraryManager"
const OperationLibraryManagementGetLibraryManager = "/v1.LibraryManagement/GetLibraryManager"
const OperationLibraryManagementListLibraryManagers = "/v1.LibraryManagement/ListLibraryManagers"
const OperationLibraryManagementUpdateLibraryManager = "/v1.LibraryManagement/UpdateLibraryManager"

type LibraryManagementHTTPServer interface {
	CreateLibraryManager(context.Context, *CreateLibraryManagerParams) (*LibraryManagerObject, error)
	DeleteLibraryManager(context.Context, *ResourceKey) (*emptypb.Empty, error)
	GetLibraryManager(context.Context, *ResourceKey) (*LibraryManagerObject, error)
	ListLibraryManagers(context.Context, *ResourceKey) (*LibraryManagersReply, error)
	UpdateLibraryManager(context.Context, *UpdateLibraryManagerParams) (*LibraryManagerObject, error)
}

func RegisterLibraryManagementHTTPServer(s *http.Server, srv LibraryManagementHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/library_managers", _LibraryManagement_ListLibraryManagers0_HTTP_Handler(srv))
	r.GET("/api/v1/library_managers/{name}", _LibraryManagement_GetLibraryManager0_HTTP_Handler(srv))
	r.POST("/api/v1/library_managers", _LibraryManagement_CreateLibraryManager0_HTTP_Handler(srv))
	r.PUT("/api/v1/library_managers/{resource_key.name}", _LibraryManagement_UpdateLibraryManager0_HTTP_Handler(srv))
	r.DELETE("/api/v1/library_managers/{name}", _LibraryManagement_DeleteLibraryManager0_HTTP_Handler(srv))
}

func _LibraryManagement_ListLibraryManagers0_HTTP_Handler(srv LibraryManagementHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResourceKey
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLibraryManagementListLibraryManagers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLibraryManagers(ctx, req.(*ResourceKey))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LibraryManagersReply)
		return ctx.Result(200, reply)
	}
}

func _LibraryManagement_GetLibraryManager0_HTTP_Handler(srv LibraryManagementHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResourceKey
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLibraryManagementGetLibraryManager)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLibraryManager(ctx, req.(*ResourceKey))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LibraryManagerObject)
		return ctx.Result(200, reply)
	}
}

func _LibraryManagement_CreateLibraryManager0_HTTP_Handler(srv LibraryManagementHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLibraryManagerParams
		if err := ctx.Bind(&in.Spec); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLibraryManagementCreateLibraryManager)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLibraryManager(ctx, req.(*CreateLibraryManagerParams))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LibraryManagerObject)
		return ctx.Result(200, reply)
	}
}

func _LibraryManagement_UpdateLibraryManager0_HTTP_Handler(srv LibraryManagementHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateLibraryManagerParams
		if err := ctx.Bind(&in.Spec); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLibraryManagementUpdateLibraryManager)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateLibraryManager(ctx, req.(*UpdateLibraryManagerParams))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LibraryManagerObject)
		return ctx.Result(200, reply)
	}
}

func _LibraryManagement_DeleteLibraryManager0_HTTP_Handler(srv LibraryManagementHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResourceKey
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLibraryManagementDeleteLibraryManager)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLibraryManager(ctx, req.(*ResourceKey))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type LibraryManagementHTTPClient interface {
	CreateLibraryManager(ctx context.Context, req *CreateLibraryManagerParams, opts ...http.CallOption) (rsp *LibraryManagerObject, err error)
	DeleteLibraryManager(ctx context.Context, req *ResourceKey, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetLibraryManager(ctx context.Context, req *ResourceKey, opts ...http.CallOption) (rsp *LibraryManagerObject, err error)
	ListLibraryManagers(ctx context.Context, req *ResourceKey, opts ...http.CallOption) (rsp *LibraryManagersReply, err error)
	UpdateLibraryManager(ctx context.Context, req *UpdateLibraryManagerParams, opts ...http.CallOption) (rsp *LibraryManagerObject, err error)
}

type LibraryManagementHTTPClientImpl struct {
	cc *http.Client
}

func NewLibraryManagementHTTPClient(client *http.Client) LibraryManagementHTTPClient {
	return &LibraryManagementHTTPClientImpl{client}
}

func (c *LibraryManagementHTTPClientImpl) CreateLibraryManager(ctx context.Context, in *CreateLibraryManagerParams, opts ...http.CallOption) (*LibraryManagerObject, error) {
	var out LibraryManagerObject
	pattern := "/api/v1/library_managers"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLibraryManagementCreateLibraryManager))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Spec, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LibraryManagementHTTPClientImpl) DeleteLibraryManager(ctx context.Context, in *ResourceKey, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/library_managers/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLibraryManagementDeleteLibraryManager))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LibraryManagementHTTPClientImpl) GetLibraryManager(ctx context.Context, in *ResourceKey, opts ...http.CallOption) (*LibraryManagerObject, error) {
	var out LibraryManagerObject
	pattern := "/api/v1/library_managers/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLibraryManagementGetLibraryManager))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LibraryManagementHTTPClientImpl) ListLibraryManagers(ctx context.Context, in *ResourceKey, opts ...http.CallOption) (*LibraryManagersReply, error) {
	var out LibraryManagersReply
	pattern := "/api/v1/library_managers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLibraryManagementListLibraryManagers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LibraryManagementHTTPClientImpl) UpdateLibraryManager(ctx context.Context, in *UpdateLibraryManagerParams, opts ...http.CallOption) (*LibraryManagerObject, error) {
	var out LibraryManagerObject
	pattern := "/api/v1/library_managers/{resource_key.name}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLibraryManagementUpdateLibraryManager))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Spec, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
