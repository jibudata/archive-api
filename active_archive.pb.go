// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: active_archive.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LibraryManagerResourceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LocationInfo *DefaultResourceRequest `protobuf:"bytes,2,opt,name=location_info,json=locationInfo,proto3" json:"location_info,omitempty"`
}

func (x *LibraryManagerResourceKey) Reset() {
	*x = LibraryManagerResourceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibraryManagerResourceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibraryManagerResourceKey) ProtoMessage() {}

func (x *LibraryManagerResourceKey) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibraryManagerResourceKey.ProtoReflect.Descriptor instead.
func (*LibraryManagerResourceKey) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{0}
}

func (x *LibraryManagerResourceKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LibraryManagerResourceKey) GetLocationInfo() *DefaultResourceRequest {
	if x != nil {
		return x.LocationInfo
	}
	return nil
}

type MediaInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tape *TapeInfo `protobuf:"bytes,1,opt,name=tape,proto3" json:"tape,omitempty"`
}

func (x *MediaInfoReply) Reset() {
	*x = MediaInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaInfoReply) ProtoMessage() {}

func (x *MediaInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaInfoReply.ProtoReflect.Descriptor instead.
func (*MediaInfoReply) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{1}
}

func (x *MediaInfoReply) GetTape() *TapeInfo {
	if x != nil {
		return x.Tape
	}
	return nil
}

type CreatePoolParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LocationInfo *DefaultResourceRequest `protobuf:"bytes,2,opt,name=location_info,json=locationInfo,proto3" json:"location_info,omitempty"`
}

func (x *CreatePoolParams) Reset() {
	*x = CreatePoolParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePoolParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolParams) ProtoMessage() {}

func (x *CreatePoolParams) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePoolParams.ProtoReflect.Descriptor instead.
func (*CreatePoolParams) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePoolParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePoolParams) GetLocationInfo() *DefaultResourceRequest {
	if x != nil {
		return x.LocationInfo
	}
	return nil
}

type PoolAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool         *LibraryManagerResourceKey `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	Key          uint64                     `protobuf:"varint,2,opt,name=key,proto3" json:"key,omitempty"`
	FormatTape   bool                       `protobuf:"varint,3,opt,name=format_tape,json=formatTape,proto3" json:"format_tape,omitempty"`
	PerformCheck bool                       `protobuf:"varint,4,opt,name=perform_check,json=performCheck,proto3" json:"perform_check,omitempty"`
	TapeId       []string                   `protobuf:"bytes,5,rep,name=tape_id,json=tapeId,proto3" json:"tape_id,omitempty"`
}

func (x *PoolAddRequest) Reset() {
	*x = PoolAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolAddRequest) ProtoMessage() {}

func (x *PoolAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolAddRequest.ProtoReflect.Descriptor instead.
func (*PoolAddRequest) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{3}
}

func (x *PoolAddRequest) GetPool() *LibraryManagerResourceKey {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *PoolAddRequest) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *PoolAddRequest) GetFormatTape() bool {
	if x != nil {
		return x.FormatTape
	}
	return false
}

func (x *PoolAddRequest) GetPerformCheck() bool {
	if x != nil {
		return x.PerformCheck
	}
	return false
}

func (x *PoolAddRequest) GetTapeId() []string {
	if x != nil {
		return x.TapeId
	}
	return nil
}

type PoolRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool   *LibraryManagerResourceKey `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	Key    uint64                     `protobuf:"varint,2,opt,name=key,proto3" json:"key,omitempty"`
	TapeId []string                   `protobuf:"bytes,3,rep,name=tape_id,json=tapeId,proto3" json:"tape_id,omitempty"`
}

func (x *PoolRemoveRequest) Reset() {
	*x = PoolRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolRemoveRequest) ProtoMessage() {}

func (x *PoolRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolRemoveRequest.ProtoReflect.Descriptor instead.
func (*PoolRemoveRequest) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{4}
}

func (x *PoolRemoveRequest) GetPool() *LibraryManagerResourceKey {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *PoolRemoveRequest) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *PoolRemoveRequest) GetTapeId() []string {
	if x != nil {
		return x.TapeId
	}
	return nil
}

type PoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolName    string `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	Total       uint64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Free        uint64 `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	Reclaimable uint64 `protobuf:"varint,4,opt,name=reclaimable,proto3" json:"reclaimable,omitempty"`
	NumberTapes uint64 `protobuf:"varint,5,opt,name=number_tapes,json=numberTapes,proto3" json:"number_tapes,omitempty"`
}

func (x *PoolInfo) Reset() {
	*x = PoolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolInfo) ProtoMessage() {}

func (x *PoolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolInfo.ProtoReflect.Descriptor instead.
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{5}
}

func (x *PoolInfo) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *PoolInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PoolInfo) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *PoolInfo) GetReclaimable() uint64 {
	if x != nil {
		return x.Reclaimable
	}
	return 0
}

func (x *PoolInfo) GetNumberTapes() uint64 {
	if x != nil {
		return x.NumberTapes
	}
	return 0
}

type PoolsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*PoolInfo `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *PoolsInfo) Reset() {
	*x = PoolsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolsInfo) ProtoMessage() {}

func (x *PoolsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolsInfo.ProtoReflect.Descriptor instead.
func (*PoolsInfo) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{6}
}

func (x *PoolsInfo) GetPools() []*PoolInfo {
	if x != nil {
		return x.Pools
	}
	return nil
}

type DriveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	Slot       uint64 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Status     string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Busy       bool   `protobuf:"varint,5,opt,name=busy,proto3" json:"busy,omitempty"`
}

func (x *DriveInfo) Reset() {
	*x = DriveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveInfo) ProtoMessage() {}

func (x *DriveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveInfo.ProtoReflect.Descriptor instead.
func (*DriveInfo) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{7}
}

func (x *DriveInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DriveInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DriveInfo) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *DriveInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DriveInfo) GetBusy() bool {
	if x != nil {
		return x.Busy
	}
	return false
}

type DrivesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drives []*DriveInfo `protobuf:"bytes,1,rep,name=drives,proto3" json:"drives,omitempty"`
}

func (x *DrivesInfo) Reset() {
	*x = DrivesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrivesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrivesInfo) ProtoMessage() {}

func (x *DrivesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrivesInfo.ProtoReflect.Descriptor instead.
func (*DrivesInfo) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{8}
}

func (x *DrivesInfo) GetDrives() []*DriveInfo {
	if x != nil {
		return x.Drives
	}
	return nil
}

type TapeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slot           uint64 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	TotalCapacity  uint64 `protobuf:"varint,3,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`
	RemainCapacity uint64 `protobuf:"varint,4,opt,name=remain_capacity,json=remainCapacity,proto3" json:"remain_capacity,omitempty"`
	Reclaimable    uint64 `protobuf:"varint,5,opt,name=reclaimable,proto3" json:"reclaimable,omitempty"`
	Status         string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Inprogress     uint64 `protobuf:"varint,7,opt,name=inprogress,proto3" json:"inprogress,omitempty"`
	Pool           string `protobuf:"bytes,8,opt,name=pool,proto3" json:"pool,omitempty"`
	State          string `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TapeInfo) Reset() {
	*x = TapeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TapeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapeInfo) ProtoMessage() {}

func (x *TapeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapeInfo.ProtoReflect.Descriptor instead.
func (*TapeInfo) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{9}
}

func (x *TapeInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TapeInfo) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *TapeInfo) GetTotalCapacity() uint64 {
	if x != nil {
		return x.TotalCapacity
	}
	return 0
}

func (x *TapeInfo) GetRemainCapacity() uint64 {
	if x != nil {
		return x.RemainCapacity
	}
	return 0
}

func (x *TapeInfo) GetReclaimable() uint64 {
	if x != nil {
		return x.Reclaimable
	}
	return 0
}

func (x *TapeInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TapeInfo) GetInprogress() uint64 {
	if x != nil {
		return x.Inprogress
	}
	return 0
}

func (x *TapeInfo) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *TapeInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type MediumInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tapes []*TapeInfo `protobuf:"bytes,1,rep,name=tapes,proto3" json:"tapes,omitempty"`
}

func (x *MediumInfo) Reset() {
	*x = MediumInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediumInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediumInfo) ProtoMessage() {}

func (x *MediumInfo) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediumInfo.ProtoReflect.Descriptor instead.
func (*MediumInfo) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{10}
}

func (x *MediumInfo) GetTapes() []*TapeInfo {
	if x != nil {
		return x.Tapes
	}
	return nil
}

type ReplyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *ReplyMessage) Reset() {
	*x = ReplyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMessage) ProtoMessage() {}

func (x *ReplyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMessage.ProtoReflect.Descriptor instead.
func (*ReplyMessage) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{11}
}

func (x *ReplyMessage) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ReplyMessage) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type MigrateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool       *LibraryManagerResourceKey `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	Files      []string                   `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	Premigrate bool                       `protobuf:"varint,3,opt,name=premigrate,proto3" json:"premigrate,omitempty"`
}

func (x *MigrateRequest) Reset() {
	*x = MigrateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateRequest) ProtoMessage() {}

func (x *MigrateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateRequest.ProtoReflect.Descriptor instead.
func (*MigrateRequest) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{12}
}

func (x *MigrateRequest) GetPool() *LibraryManagerResourceKey {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *MigrateRequest) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *MigrateRequest) GetPremigrate() bool {
	if x != nil {
		return x.Premigrate
	}
	return false
}

type RecallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resident     bool                    `protobuf:"varint,1,opt,name=resident,proto3" json:"resident,omitempty"`
	Files        []string                `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	LocationInfo *DefaultResourceRequest `protobuf:"bytes,3,opt,name=location_info,json=locationInfo,proto3" json:"location_info,omitempty"`
}

func (x *RecallRequest) Reset() {
	*x = RecallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecallRequest) ProtoMessage() {}

func (x *RecallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecallRequest.ProtoReflect.Descriptor instead.
func (*RecallRequest) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{13}
}

func (x *RecallRequest) GetResident() bool {
	if x != nil {
		return x.Resident
	}
	return false
}

func (x *RecallRequest) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *RecallRequest) GetLocationInfo() *DefaultResourceRequest {
	if x != nil {
		return x.LocationInfo
	}
	return nil
}

type MigrationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success       bool  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	RequestNumber int64 `protobuf:"varint,2,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	Pid           int64 `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	Resident      int64 `protobuf:"varint,4,opt,name=resident,proto3" json:"resident,omitempty"`
	Transferred   int64 `protobuf:"varint,5,opt,name=transferred,proto3" json:"transferred,omitempty"`
	Premigrated   int64 `protobuf:"varint,6,opt,name=premigrated,proto3" json:"premigrated,omitempty"`
	Migrated      int64 `protobuf:"varint,7,opt,name=migrated,proto3" json:"migrated,omitempty"`
	Failed        int64 `protobuf:"varint,8,opt,name=failed,proto3" json:"failed,omitempty"`
	Done          bool  `protobuf:"varint,9,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *MigrationStatus) Reset() {
	*x = MigrationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStatus) ProtoMessage() {}

func (x *MigrationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStatus.ProtoReflect.Descriptor instead.
func (*MigrationStatus) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{14}
}

func (x *MigrationStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MigrationStatus) GetRequestNumber() int64 {
	if x != nil {
		return x.RequestNumber
	}
	return 0
}

func (x *MigrationStatus) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *MigrationStatus) GetResident() int64 {
	if x != nil {
		return x.Resident
	}
	return 0
}

func (x *MigrationStatus) GetTransferred() int64 {
	if x != nil {
		return x.Transferred
	}
	return 0
}

func (x *MigrationStatus) GetPremigrated() int64 {
	if x != nil {
		return x.Premigrated
	}
	return 0
}

func (x *MigrationStatus) GetMigrated() int64 {
	if x != nil {
		return x.Migrated
	}
	return 0
}

func (x *MigrationStatus) GetFailed() int64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *MigrationStatus) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type AsyncStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestNumber int64                   `protobuf:"varint,1,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	LocationInfo  *DefaultResourceRequest `protobuf:"bytes,2,opt,name=location_info,json=locationInfo,proto3" json:"location_info,omitempty"`
}

func (x *AsyncStatusRequest) Reset() {
	*x = AsyncStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncStatusRequest) ProtoMessage() {}

func (x *AsyncStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncStatusRequest.ProtoReflect.Descriptor instead.
func (*AsyncStatusRequest) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{15}
}

func (x *AsyncStatusRequest) GetRequestNumber() int64 {
	if x != nil {
		return x.RequestNumber
	}
	return 0
}

func (x *AsyncStatusRequest) GetLocationInfo() *DefaultResourceRequest {
	if x != nil {
		return x.LocationInfo
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MigrationState    string `protobuf:"bytes,1,opt,name=migration_state,json=migrationState,proto3" json:"migration_state,omitempty"`
	FileName          string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Size              uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Blocks            uint64 `protobuf:"varint,4,opt,name=blocks,proto3" json:"blocks,omitempty"`
	FilesystemUidHigh uint64 `protobuf:"varint,5,opt,name=filesystem_uid_high,json=filesystemUidHigh,proto3" json:"filesystem_uid_high,omitempty"`
	FilesystemUidLow  uint64 `protobuf:"varint,6,opt,name=filesystem_uid_low,json=filesystemUidLow,proto3" json:"filesystem_uid_low,omitempty"`
	InodeGeneration   uint32 `protobuf:"varint,7,opt,name=inode_generation,json=inodeGeneration,proto3" json:"inode_generation,omitempty"`
	InodeNumber       uint64 `protobuf:"varint,8,opt,name=inode_number,json=inodeNumber,proto3" json:"inode_number,omitempty"`
	TapeId            string `protobuf:"bytes,9,opt,name=tape_id,json=tapeId,proto3" json:"tape_id,omitempty"`
	StartBlock        int64  `protobuf:"varint,10,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{16}
}

func (x *FileInfo) GetMigrationState() string {
	if x != nil {
		return x.MigrationState
	}
	return ""
}

func (x *FileInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetBlocks() uint64 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *FileInfo) GetFilesystemUidHigh() uint64 {
	if x != nil {
		return x.FilesystemUidHigh
	}
	return 0
}

func (x *FileInfo) GetFilesystemUidLow() uint64 {
	if x != nil {
		return x.FilesystemUidLow
	}
	return 0
}

func (x *FileInfo) GetInodeGeneration() uint32 {
	if x != nil {
		return x.InodeGeneration
	}
	return 0
}

func (x *FileInfo) GetInodeNumber() uint64 {
	if x != nil {
		return x.InodeNumber
	}
	return 0
}

func (x *FileInfo) GetTapeId() string {
	if x != nil {
		return x.TapeId
	}
	return ""
}

func (x *FileInfo) GetStartBlock() int64 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

type FileInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName     string                  `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	LocationInfo *DefaultResourceRequest `protobuf:"bytes,2,opt,name=location_info,json=locationInfo,proto3" json:"location_info,omitempty"`
}

func (x *FileInfoRequest) Reset() {
	*x = FileInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_active_archive_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfoRequest) ProtoMessage() {}

func (x *FileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_active_archive_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfoRequest.ProtoReflect.Descriptor instead.
func (*FileInfoRequest) Descriptor() ([]byte, []int) {
	return file_active_archive_proto_rawDescGZIP(), []int{17}
}

func (x *FileInfoRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfoRequest) GetLocationInfo() *DefaultResourceRequest {
	if x != nil {
		return x.LocationInfo
	}
	return nil
}

var File_active_archive_proto protoreflect.FileDescriptor

var file_active_archive_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0a, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x70, 0x0a, 0x19, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x32, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x61, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x74, 0x61, 0x70, 0x65, 0x22, 0x67, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x74, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x61, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x70, 0x65, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x11, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x70, 0x65, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x70, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61,
	0x70, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x09, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x7c, 0x0a, 0x09, 0x44, 0x72, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x75, 0x73, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x75,
	0x73, 0x79, 0x22, 0x33, 0x0a, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x25, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x30, 0x0a, 0x0a,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x61, 0x70, 0x65, 0x73, 0x22, 0x4a,
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x79, 0x0a, 0x0e, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8c, 0x02, 0x0a, 0x0f, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x7c, 0x0a, 0x12, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe2, 0x02, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x69, 0x64, 0x48, 0x69, 0x67, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x69,
	0x64, 0x4c, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x6f, 0x0a, 0x0f,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xb4, 0x11,
	0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x7c, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x96, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x12, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x7b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x84, 0x01,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x3a, 0x01, 0x2a, 0x22,
	0x43, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4c, 0x2a, 0x4a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa9,
	0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x6f, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6b, 0x3a,
	0x01, 0x2a, 0x22, 0x66, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0xb4, 0x01, 0x0a, 0x13, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x6e, 0x3a, 0x01, 0x2a, 0x22, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x91, 0x01, 0x0a, 0x07, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x3a, 0x01,
	0x2a, 0x22, 0x52, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x12, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51,
	0x3a, 0x01, 0x2a, 0x22, 0x4c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x1a,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x22, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x12, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5d, 0x3a, 0x01, 0x2a, 0x22, 0x58,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x3a, 0x01, 0x2a, 0x22, 0x52, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12,
	0xa2, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5d, 0x12, 0x5b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x12,
	0x53, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6a, 0x69, 0x62, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x61, 0x6c, 0x2d, 0x61, 0x70, 0x69, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_active_archive_proto_rawDescOnce sync.Once
	file_active_archive_proto_rawDescData = file_active_archive_proto_rawDesc
)

func file_active_archive_proto_rawDescGZIP() []byte {
	file_active_archive_proto_rawDescOnce.Do(func() {
		file_active_archive_proto_rawDescData = protoimpl.X.CompressGZIP(file_active_archive_proto_rawDescData)
	})
	return file_active_archive_proto_rawDescData
}

var file_active_archive_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_active_archive_proto_goTypes = []interface{}{
	(*LibraryManagerResourceKey)(nil), // 0: v1.LibraryManagerResourceKey
	(*MediaInfoReply)(nil),            // 1: v1.MediaInfoReply
	(*CreatePoolParams)(nil),          // 2: v1.CreatePoolParams
	(*PoolAddRequest)(nil),            // 3: v1.PoolAddRequest
	(*PoolRemoveRequest)(nil),         // 4: v1.PoolRemoveRequest
	(*PoolInfo)(nil),                  // 5: v1.PoolInfo
	(*PoolsInfo)(nil),                 // 6: v1.PoolsInfo
	(*DriveInfo)(nil),                 // 7: v1.DriveInfo
	(*DrivesInfo)(nil),                // 8: v1.DrivesInfo
	(*TapeInfo)(nil),                  // 9: v1.TapeInfo
	(*MediumInfo)(nil),                // 10: v1.MediumInfo
	(*ReplyMessage)(nil),              // 11: v1.ReplyMessage
	(*MigrateRequest)(nil),            // 12: v1.MigrateRequest
	(*RecallRequest)(nil),             // 13: v1.RecallRequest
	(*MigrationStatus)(nil),           // 14: v1.MigrationStatus
	(*AsyncStatusRequest)(nil),        // 15: v1.AsyncStatusRequest
	(*FileInfo)(nil),                  // 16: v1.FileInfo
	(*FileInfoRequest)(nil),           // 17: v1.FileInfoRequest
	(*DefaultResourceRequest)(nil),    // 18: v1.DefaultResourceRequest
	(*emptypb.Empty)(nil),             // 19: google.protobuf.Empty
}
var file_active_archive_proto_depIdxs = []int32{
	18, // 0: v1.LibraryManagerResourceKey.location_info:type_name -> v1.DefaultResourceRequest
	9,  // 1: v1.MediaInfoReply.tape:type_name -> v1.TapeInfo
	18, // 2: v1.CreatePoolParams.location_info:type_name -> v1.DefaultResourceRequest
	0,  // 3: v1.PoolAddRequest.pool:type_name -> v1.LibraryManagerResourceKey
	0,  // 4: v1.PoolRemoveRequest.pool:type_name -> v1.LibraryManagerResourceKey
	5,  // 5: v1.PoolsInfo.pools:type_name -> v1.PoolInfo
	7,  // 6: v1.DrivesInfo.drives:type_name -> v1.DriveInfo
	9,  // 7: v1.MediumInfo.tapes:type_name -> v1.TapeInfo
	0,  // 8: v1.MigrateRequest.pool:type_name -> v1.LibraryManagerResourceKey
	18, // 9: v1.RecallRequest.location_info:type_name -> v1.DefaultResourceRequest
	18, // 10: v1.AsyncStatusRequest.location_info:type_name -> v1.DefaultResourceRequest
	18, // 11: v1.FileInfoRequest.location_info:type_name -> v1.DefaultResourceRequest
	18, // 12: v1.ActiveArchive.ListMediumInfo:input_type -> v1.DefaultResourceRequest
	0,  // 13: v1.ActiveArchive.GetMediaInfo:input_type -> v1.LibraryManagerResourceKey
	18, // 14: v1.ActiveArchive.GetDrivesInfo:input_type -> v1.DefaultResourceRequest
	18, // 15: v1.ActiveArchive.GetPoolsInfo:input_type -> v1.DefaultResourceRequest
	2,  // 16: v1.ActiveArchive.CreatePool:input_type -> v1.CreatePoolParams
	0,  // 17: v1.ActiveArchive.DeletePool:input_type -> v1.LibraryManagerResourceKey
	3,  // 18: v1.ActiveArchive.AddMediaToPool:input_type -> v1.PoolAddRequest
	4,  // 19: v1.ActiveArchive.RemoveMediaFromPool:input_type -> v1.PoolRemoveRequest
	12, // 20: v1.ActiveArchive.Migrate:input_type -> v1.MigrateRequest
	13, // 21: v1.ActiveArchive.Recall:input_type -> v1.RecallRequest
	18, // 22: v1.ActiveArchive.Retrieve:input_type -> v1.DefaultResourceRequest
	12, // 23: v1.ActiveArchive.MigrateAsync:input_type -> v1.MigrateRequest
	13, // 24: v1.ActiveArchive.RecallAsync:input_type -> v1.RecallRequest
	15, // 25: v1.ActiveArchive.GetAsyncStatus:input_type -> v1.AsyncStatusRequest
	17, // 26: v1.ActiveArchive.GetFileInfo:input_type -> v1.FileInfoRequest
	10, // 27: v1.ActiveArchive.ListMediumInfo:output_type -> v1.MediumInfo
	1,  // 28: v1.ActiveArchive.GetMediaInfo:output_type -> v1.MediaInfoReply
	8,  // 29: v1.ActiveArchive.GetDrivesInfo:output_type -> v1.DrivesInfo
	6,  // 30: v1.ActiveArchive.GetPoolsInfo:output_type -> v1.PoolsInfo
	11, // 31: v1.ActiveArchive.CreatePool:output_type -> v1.ReplyMessage
	19, // 32: v1.ActiveArchive.DeletePool:output_type -> google.protobuf.Empty
	11, // 33: v1.ActiveArchive.AddMediaToPool:output_type -> v1.ReplyMessage
	11, // 34: v1.ActiveArchive.RemoveMediaFromPool:output_type -> v1.ReplyMessage
	14, // 35: v1.ActiveArchive.Migrate:output_type -> v1.MigrationStatus
	14, // 36: v1.ActiveArchive.Recall:output_type -> v1.MigrationStatus
	11, // 37: v1.ActiveArchive.Retrieve:output_type -> v1.ReplyMessage
	14, // 38: v1.ActiveArchive.MigrateAsync:output_type -> v1.MigrationStatus
	14, // 39: v1.ActiveArchive.RecallAsync:output_type -> v1.MigrationStatus
	14, // 40: v1.ActiveArchive.GetAsyncStatus:output_type -> v1.MigrationStatus
	16, // 41: v1.ActiveArchive.GetFileInfo:output_type -> v1.FileInfo
	27, // [27:42] is the sub-list for method output_type
	12, // [12:27] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_active_archive_proto_init() }
func file_active_archive_proto_init() {
	if File_active_archive_proto != nil {
		return
	}
	file_meta_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_active_archive_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibraryManagerResourceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePoolParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrivesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TapeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediumInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_active_archive_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_active_archive_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_active_archive_proto_goTypes,
		DependencyIndexes: file_active_archive_proto_depIdxs,
		MessageInfos:      file_active_archive_proto_msgTypes,
	}.Build()
	File_active_archive_proto = out.File
	file_active_archive_proto_rawDesc = nil
	file_active_archive_proto_goTypes = nil
	file_active_archive_proto_depIdxs = nil
}
